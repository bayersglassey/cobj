
def x: 1
def y: 2


module [local.test]

def f: 1 2 "Hello from f! " str_p p_stack
def g: ='z


module []
def z: 3 "Hello from z! " str_p p_stack

from [local.test]: f

def test:

    null is_null assert
    T is_bool assert
    0 is_int assert
    `xyz is_sym assert
    "abc" is_str assert
    obj() is_obj assert
    dict is_dict assert
    0 null arr is_arr assert
    nil is_nil assert
    nil is_list assert
    list() is_nil assert
    list(1 2) is_nil not assert
    list(1 2) is_list assert
    nil 1 << is_list assert

    1 1 == assert
    1 1 < not assert
    1 1 <= assert
    1 2 < assert
    1 2 != assert
    1 2 == not assert
    T assert
    F not assert

    1 1 - 0 == assert
    1 1 + 2 == assert
    6 3 / 2 == assert
    2 3 * 6 == assert

    "ABC" str_len 3 == assert

    obj: x y z
    dup .x is_null assert
    dup .y is_null assert
    dup .y is_null assert
    T =.y
    obj(a b) "A" =.a "B" =.b =.z
    ='s

    's .y assert
    's .z .a "A" str_eq assert
    "s: " str_p 's p
    "s.z: " str_p 's .z p

    dict
    "LALA" `a dict_set
    99 `b dict_set
    ='d

    'd `a dict_has assert
    'd `a dict_get "LALA" str_eq assert
    'd `b dict_get 99 == assert
    'd `c dict_has not assert
    "d: " str_p 'd p
    "d.a: " str_p 'd `a dict_get p

    6 "HA" arr
    "HI" 2 =~
    "HU" 3 =~
    ='a

    'a arr_len 6 == assert
    'a 0 ~ "HA" str_eq assert
    'a 2 ~ "HI" str_eq assert
    "a: " str_p 'a p
    "a.2: " str_p 'a 2 ~ p
    "len a: " str_p 'a arr_len p

    nil 1 << 2 << ='l
    'l list_len 2 == assert
    'l >> 2 == assert >> 1 == assert is_nil assert
    'l head 2 == assert
    'l tail head 1 == assert
    'l tail tail is_nil assert

    "l: " str_p list(1 "ABC" x) p

    @@[]z
    #'z @@[]z == assert

    "And we're back.\n" str_p

    @f
    #@f 2 == assert 1 == assert

    #10 @g
    #'z 3 == assert

    ignore:
        # It shall never come to pass!
        LALALA
        "WAWAWA"
        F assert

    `WA
    null

    p_stack
    p_vars
    return
