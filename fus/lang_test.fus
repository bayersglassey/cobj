
def x()(i): 1
def y()(i): 2



module [local.test]

def f(i)(i i): drop 1 2 "Hello from f! " str_p p_stack
def g(i)(): ='z


module []
def z()(i): 3 "Hello from z! " str_p p_stack

from [local.test]: f

def test()():
    @valtest
    @logictest
    @calltest

def valtest()():

    null is_null assert
    T is_bool assert
    0 is_int assert
    `xyz is_sym assert
    "abc" is_str assert
    obj() is_obj assert
    dict is_dict assert
    null 0 arr is_arr assert
    nil is_nil assert
    nil is_list assert
    nil 1 << is_cell assert
    nil 1 << is_list assert
    list() is_nil assert
    list(1 2) is_cell assert
    queue is_queue assert
    &test is_fun assert
    &&[local.test]f is_fun assert

    `x `x sym_eq assert
    `x `y sym_eq not assert

    null typeof `null sym_eq assert
    T typeof `bool sym_eq assert
    0 typeof `int sym_eq assert
    `xyz typeof `sym sym_eq assert
    "abc" typeof `str sym_eq assert
    obj() typeof `obj sym_eq assert
    dict typeof `dict sym_eq assert
    null 0 arr typeof `arr sym_eq assert
    nil typeof `list sym_eq assert
    list(1 2 3) typeof `list sym_eq assert
    queue typeof `queue sym_eq assert
    &test typeof `fun sym_eq assert

    ignore:
        # TODO:
        {null}null is_null assert
        {bool}T assert
        {bool}F not assert
        {int}0 0 == assert
        `{sym}xyz is_sym assert
        {str}"abc" "abc" str_eq assert
        {obj}(x 1 y 2) is_obj assert
        {dict}(x 1 y 2) is_dict assert
        {arr}(1 2 3) is_arr assert
        {queue}(1 2 3) is_queue assert
        {fun}([] test ()) is_fun assert

    ignore:
        # It shall never come to pass!
        LALALA
        "WAWAWA"
        F assert

    1 1 == assert
    1 1 < not assert
    1 1 <= assert
    1 2 < assert
    1 2 != assert
    1 2 == not assert

    T assert
    F not assert
    T T bool_eq assert
    T F bool_eq not assert

    1 1 - 0 == assert
    1 1 + 2 == assert
    6 3 / 2 == assert
    2 3 * 6 == assert

    # Negatives!
    3 10 - -7 == assert
    -7 7 + 0 == assert

    `ABC p

    "ABC" str_len 3 == assert
    "ABC" 1 str_getbyte 66 == assert
    "ABC" 66 2 str_setbyte "ABB" str_eq assert
    "ABC" "XYZ" str_join "ABCXYZ" str_eq assert

    ;la "la" \la
    "la \"la\" \\la" str_eq assert

    0 int_tostr "0" p_stack str_eq assert
    123 int_tostr "123" p_stack str_eq assert
    -123 int_tostr "-123" p_stack str_eq assert

    obj: x y z
    dup .x is_null assert
    dup .y is_null assert
    dup .y is_null assert
    T =.y
    obj(a b) "A" =.a "B" =.b =.z
    ='s

    's .y assert
    's .z .a "A" str_eq assert
    "s: " str_p 's p
    "s.z: " str_p 's .z p

    's obj_len 3 == assert
    's 1 obj_iget_key `y sym_eq assert
    's 1 obj_iget_val T bool_eq assert

    dict
    "LALA" `a set
    99 `b set
    `rwar `qqq set
    ='d

    'd `a has assert
    'd `a get "LALA" str_eq assert
    'd `b get 99 == assert
    'd `c has not assert
    'd `qqq has assert
    'd dict_n_keys 3 == assert
    'd `qqq del ='d
    'd `qqq has not assert
    'd dict_n_keys 2 == assert
    "d: " str_p 'd p
    "d.a: " str_p 'd `a get p

    "HA" 6 arr
    "HI" 2 =~
    "HU" 3 =~
    ='a

    'a arr_len 6 == assert
    'a 0 ~ "HA" str_eq assert
    'a 2 ~ "HI" str_eq assert
    "a: " str_p 'a p
    "a.2: " str_p 'a 2 ~ p
    "len a: " str_p 'a arr_len p

    nil 1 << 2 << ='l
    'l list_len 2 == assert
    'l >> 2 == assert >> 1 == assert is_nil assert
    'l head 2 == assert
    'l tail head 1 == assert
    'l tail tail is_nil assert

    "l: " str_p list(1 "ABC" x) p

    nil "A" << "B" << "C" << ='l2
    "l2: " str_p 'l2 p
    "rev l2: " str_p 'l2 rev p
    "flat l2: " str_p 'l2 flat p
    "rev_flat l2: " str_p 'l2 rev_flat p

    : list(1 2) list_toqueue queue_tolist
        >> 1 == assert >> 2 == assert is_nil assert
    : queue 1, 2, queue_tolist
        >> 1 == assert >> 2 == assert is_nil assert

    "f: " str_p &f p
    "f2: " str_p &f 2 apply 1 apply 0 apply p

    &&[local.test]f ='f
    'f fun_module `[local.test] sym_eq assert
    'f fun_name `f sym_eq assert
    'f fun_args is_nil assert

    1 2 3 vars: a b c
    'a 1 == assert
    'b 2 == assert
    'c 3 == assert


def logictest()():

    1 ='x
    T if: 3 ='x
    'x 3 == assert

    F if: "F if: fail" error

    T ifelse()("T ifelse: fail" error)
    F ifelse("F ifelse: fail" error)()

    F and("F and: fail" error) not assert
    T or ("T or: fail" error) assert

    T and(F) not assert
    F or(T) assert

    do:
        :
            break
        "do: : break fail" error

    "Doin'\n" str_p
    0 ='i 3 ='n nil ='l
    do:
        'i 'n < while
        "i: " str_p 'i p
        'l 'i << ='l
        'i 1 + ='i next
    "Done!\n" str_p
    'l >> 2 == assert >> 1 == assert >> 0 == assert is_nil assert

    "Loopin'\n" str_p
    0 ='i 3 ='n nil ='l
    for('i 1 + ='i):
        'i 'n < while
        "i: " str_p 'i p
        'l 'i << ='l
    "Done!\n" str_p
    'l >> 2 == assert >> 1 == assert >> 0 == assert is_nil assert

    "Int loopin'\n" str_p
    nil ='l
    3 int_for: ='i
        "i: " str_p 'i p
        'l 'i << ='l
    "Done!\n" str_p
    'l >> 2 == assert >> 1 == assert >> 0 == assert is_nil assert

    "List loopin'\n" str_p
    0 ='n
    list(1 2 3) list_for: ='i
        "i: " str_p 'i p
        'n 1 + ='n
    "Done!\n" str_p
    'n 3 == assert

    nil ='l
    3 int_for: ='i
        'i 1 == if: next
        'l 'i << ='l
    'l >> 2 == assert >> 0 == assert is_nil assert


def calltest()():

    @@[]z 3 == assert
    &&[]z! 3 == assert

    "And we're back.\n" str_p

    99 @f 2 == assert 1 == assert
    99 &f! 2 == assert 1 == assert

    3 ='z
    10 @@[local.test]g # make sure @g doesn't affect 'z in calling frame
    'z 3 == assert

    @@[argtest]argtest



module [argtest]

def argtest()():
    "argtest: " str_p
    1 2 @f
    "...returned! " str_p
    p_stack
    3 == assert
    1 == assert

    1 @test_ret 2 == assert

    # Regular call:
    111 222 @assert_111_222

    # Call with fun args pre-applied:
    &assert_111_222 222 apply 111 apply ='f
    'f!

def test_ret(i)(i):
    1 == assert

    :
        2 ret

    # The following will not work.
    # Better not get here, then.
    1 2 3 4 5 6 7 8 9 0

def f(x)(y):
    "f: " str_p
    p_stack
    2 == assert
    3

def assert_111_222(i i)():
    222 == assert 111 == assert
