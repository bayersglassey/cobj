
def x()(i): 1
def y()(i): 2



module [local.list_tools]

def rev(lst)(lst):
    ='lst
    nil do:
        'lst is_cell while
        'lst >> swap ='lst <<
        loop

def flat(lst)(arr):
    ='lst
    0 ='i
    'lst list_len null arr do:
        'lst is_cell while
        'lst >> swap ='lst 'i =~
        'i 1 + ='i loop

def rev_flat(lst)(arr):
    ='lst
    'lst list_len ='len
    'len 1 - ='i
    'len null arr do:
        'lst is_cell while
        'lst >> swap ='lst 'i =~
        'i 1 - ='i loop


module [local.test]

def f()(i i): 1 2 "Hello from f! " str_p p_stack
def g(i)(): ='z


module []
def z()(i): 3 "Hello from z! " str_p p_stack

from [local.test]: f

def test()():

    null is_null assert
    T is_bool assert
    0 is_int assert
    `xyz is_sym assert
    "abc" is_str assert
    obj() is_obj assert
    dict is_dict assert
    0 null arr is_arr assert
    nil is_nil assert
    nil is_list assert
    nil 1 << is_cell assert
    nil 1 << is_list assert
    list() is_nil assert
    list(1 2) is_cell assert
    &test is_fun assert
    &&[local.test]f is_fun assert

    ignore:
        # TODO:
        {null}null is_null assert
        {bool}T assert
        {bool}F not assert
        {int}0 0 == assert
        `{sym}xyz is_sym assert
        {str}"abc" "abc" str_eq assert
        {obj}(x 1 y 2) is_obj assert
        {dict}(x 1 y 2) is_dict assert
        {arr}(1 2 3) is_arr assert
        {nil}nil is_nil assert
        list{cell}(1 2 3) is_cell assert
        {fun}([] test ()) is_fun assert

    ignore:
        # It shall never come to pass!
        LALALA
        "WAWAWA"
        F assert

    1 1 == assert
    1 1 < not assert
    1 1 <= assert
    1 2 < assert
    1 2 != assert
    1 2 == not assert
    T assert
    F not assert

    1 1 - 0 == assert
    1 1 + 2 == assert
    6 3 / 2 == assert
    2 3 * 6 == assert

    `ABC p

    "ABC" str_len 3 == assert

    obj: x y z
    dup .x is_null assert
    dup .y is_null assert
    dup .y is_null assert
    T =.y
    obj(a b) "A" =.a "B" =.b =.z
    ='s

    's .y assert
    's .z .a "A" str_eq assert
    "s: " str_p 's p
    "s.z: " str_p 's .z p

    dict
    "LALA" `a dict_set
    99 `b dict_set
    ='d

    'd `a dict_has assert
    'd `a dict_get "LALA" str_eq assert
    'd `b dict_get 99 == assert
    'd `c dict_has not assert
    "d: " str_p 'd p
    "d.a: " str_p 'd `a dict_get p

    6 "HA" arr
    "HI" 2 =~
    "HU" 3 =~
    ='a

    'a arr_len 6 == assert
    'a 0 ~ "HA" str_eq assert
    'a 2 ~ "HI" str_eq assert
    "a: " str_p 'a p
    "a.2: " str_p 'a 2 ~ p
    "len a: " str_p 'a arr_len p

    nil 1 << 2 << ='l
    'l list_len 2 == assert
    'l >> 2 == assert >> 1 == assert is_nil assert
    'l head 2 == assert
    'l tail head 1 == assert
    'l tail tail is_nil assert

    "l: " str_p list(1 "ABC" x) p

    nil "A" << "B" << "C" << ='l2
    "l2: " str_p 'l2 p
    "rev l2: " str_p 'l2 rev p
    "flat l2: " str_p 'l2 flat p
    "rev_flat l2: " str_p 'l2 rev_flat p

    "f: " str_p &f p
    "f2: " str_p &f 2 apply 1 apply 0 apply p

    @@[]z
    &&[]z!
    #'z @@[]z == assert

    "And we're back.\n" str_p

    @f
    &f!
    #@f 2 == assert 1 == assert

    #10 @g
    #'z 3 == assert
