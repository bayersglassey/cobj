
module [eqtools]


def test()():

    null null @eq assert

    T T @eq assert
    T F @eq not assert

    1 1 @eq assert
    1 2 @eq not assert

    `x `x @eq assert
    `x `y @eq not assert

    "X" "X" @eq assert
    "X" "Y" @eq not assert

    obj(x y) obj(x) @eq not assert
    obj(x y) obj(x y) @eq assert
    obj(x y) 1 =.x obj(x y) @eq not assert

    &eq &eq @eq assert
    &eq (&eq 1 apply) @eq not assert
    (&eq 1 apply) (&eq 1 apply) @eq assert
    &eq &list_eq @eq not assert

    (null 3 arr) (null 2 arr) @eq not assert
    (null 3 arr) (null 3 arr) @eq assert
    ("X" 3 arr) ("Y" 3 arr) @eq not assert
    ("X" 3 arr) ("X" 3 arr) @eq assert

    dict dict @eq assert
    dict (dict 1 `x set) @eq not assert
    (dict 1 `x set) (dict 1 `x set) @eq assert
    (dict 1 `x set) (dict 1 `y set) @eq not assert

    nil nil @eq assert
    nil list(1 2 3) @eq not assert
    list(1 2 3) list(4 5 6) @eq not assert
    list(1 2 3) list(1 2 3) @eq assert


def eq(* *)(b):
    vars: x y

    # Must be same type
    'x typeof 'y typeof sym_eq not if: F ret

    'x is_null if: 'y is_null ret
    'x is_bool if: 'x 'y bool_eq ret
    'x is_int if: 'x 'y == ret
    'x is_sym if: 'x 'y sym_eq ret
    'x is_str if: 'x 'y str_eq ret
    'x is_obj if: 'x 'y @obj_eq ret
    'x is_fun if: 'x 'y @fun_eq ret
    'x is_arr if: 'x 'y @arr_eq ret
    'x is_dict if: 'x 'y @dict_eq ret
    'x is_list if: 'x 'y @list_eq ret

    # In case we extend the language later, I suppose!
    "Unsupported type" error


def arr_eq(a a)(b):
    vars: x y
    'x arr_len 'y arr_len != if: F ret
    'x arr_len int_for: ='i
        'x 'i ~ 'y 'i ~ @eq not if: F ret
    T ret


def dict_eq(d d)(b):
    vars: x y
    'x dict_n_keys 'y dict_n_keys != if: F ret
    'x dict_len int_for: ='i
        'x 'i dict_ihas not if: next
        'x 'i dict_iget_key ='key
        'x 'i dict_iget_val ='val
        'y 'key has not if: F ret
        'y 'key get 'val @eq not if: F ret
    T ret


def obj_eq(o o)(b):
    vars: x y
    'x obj_len 'y obj_len != if: F ret
    'x obj_len int_for: ='i
        'x 'i obj_iget_key 'y 'i obj_iget_key sym_eq not if: F ret
        'x 'i obj_iget_val 'y 'i obj_iget_val @eq not if: F ret
    T ret


def list_eq(l l)(b):
    vars: x y

    # If x is nil, they both should be
    'x is_nil if: 'y is_nil ret

    # If x is not nil, they should both be cells
    'y is_cell not if: F ret

    # Pop the heads
    'x >> ='hx ='x
    'y >> ='hy ='y

    # Heads should be the same
    'hx 'hy @eq not if: F ret

    # Tails should be the same (recurse)
    'x 'y @list_eq ret


def fun_eq(f f)(b):
    vars: x y
    # One could also argue that functions shouldn't be allowed to be
    # compared for equality, but these aren't functions...
    # ...they're funs. *waves hand airily*
    'x fun_module 'y fun_module sym_eq not if: F ret
    'x fun_name 'y fun_name sym_eq not if: F ret
    'x fun_args 'y fun_args @list_eq not if: F ret
    T ret

